"use strict";(self.webpackChunk_monster_js_docs=self.webpackChunk_monster_js_docs||[]).push([[97],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),u=s(n),d=i,h=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return n?r.createElement(h,c(c({ref:t},m),{},{components:n})):r.createElement(h,c({ref:t},m))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,c=new Array(o);c[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:i,c[1]=a;for(var s=2;s<o;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8863:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:11},c="Custom Directives",a={unversionedId:"main-concept/custom-directive",id:"main-concept/custom-directive",title:"Custom Directives",description:"Custom directives are functions that manipulate elements in a MonsterJS application. They can be used to add behavior or modify the appearance of an element.",source:"@site/docs/main-concept/custom-directive.md",sourceDirName:"main-concept",slug:"/main-concept/custom-directive",permalink:"/docs/docs/main-concept/custom-directive",draft:!1,editUrl:"https://github.com/monster-js/documentation/docs/main-concept/custom-directive.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Directives",permalink:"/docs/docs/main-concept/directives"},next:{title:"Services",permalink:"/docs/docs/main-concept/services"}},l={},s=[{value:"Creating a Custom Directive",id:"creating-a-custom-directive",level:2},{value:"Register a Directive to Component",id:"register-a-directive-to-component",level:2},{value:"Using a Directive",id:"using-a-directive",level:2},{value:"Value Change Watcher",id:"value-change-watcher",level:2},{value:"The directive",id:"the-directive",level:4},{value:"The component",id:"the-component",level:4}],m={toc:s},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-directives"},"Custom Directives"),(0,i.kt)("p",null,"Custom directives are functions that manipulate elements in a MonsterJS application. They can be used to add behavior or modify the appearance of an element."),(0,i.kt)("h2",{id:"creating-a-custom-directive"},"Creating a Custom Directive"),(0,i.kt)("p",null,"To create a custom directive, we can use the CLI to automatically generate a directive file with boilerplate code or we can manually create a file and write the code from scratch."),(0,i.kt)("p",null,"The following code is an example of a custom directive in MonsterJS, but it does not have any functionality yet."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FunctionComponent, createWatcher, createDirective, DirectiveObject } from \"framework\";\n\nexport function highlightDirective(element: HTMLElement, directives: DirectiveObject, context: FunctionComponent) {\n    return element;\n}\n\ncreateDirective(highlightDirective, 'highlight');\n")),(0,i.kt)("p",null,"The next step is to handle the custom directive by creating a condition to check if the directive has been defined."),(0,i.kt)("p",null,"Here is an example of how to use the custom directive highlight to set the background color of an element to red: ",(0,i.kt)("inlineCode",{parentName:"p"},'<div highlight:color="red">Some text</div>'),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FunctionComponent, createDirective, DirectiveObject } from \"framework\";\n\nexport function highlightDirective(element: HTMLElement, directives: DirectiveObject, context: FunctionComponent) {\n    const { color } = directives;\n\n    if (color) {\n        element.style.backgroundColor = color.get();\n    }\n\n    return element;\n}\n\ncreateDirective(highlightDirective, 'highlight');\n")),(0,i.kt)("h2",{id:"register-a-directive-to-component"},"Register a Directive to Component"),(0,i.kt)("p",null,"Before using a custom directive, we must first register it with a component. The following examples demonstrate how to register a directive:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { registerDirectives } from '@monster-js/core';\nimport { customDirective1 } from './custom-directive1.directive';\nimport { customDirective2 } from './custom-directive2.directive';\n\nexport function Greeting() {\n    return <h1>Hello World!</h1>\n}\n\nregisterDirectives(Greeting, [customDirective1, customDirective2]);\n")),(0,i.kt)("h2",{id:"using-a-directive"},"Using a Directive"),(0,i.kt)("p",null,"After registering the custom directive, we can now use it using the following syntax: ",(0,i.kt)("inlineCode",{parentName:"p"},'<namespace>:<name>="<value>"'),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { registerDirectives } from '@monster-js/core';\nimport { highlight } from './highlight.directive';\n\nexport function Greeting() {\n    return <h1 highlight:color=\"red\">Hello World!</h1>\n}\n\nregisterDirectives(Greeting, [highlight]);\n")),(0,i.kt)("h2",{id:"value-change-watcher"},"Value Change Watcher"),(0,i.kt)("p",null,"To make our custom directive respond to changes in its value, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"createWatcher")," function from the core package."),(0,i.kt)("p",null,"Here's an example of how to use a custom directive to change the background color of an element based on the value passed to the directive:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\x3c!-- valueCaller: () => any,\nelement: HTMLElement,\ncontext: FunctionComponent,\nupdateCallback: (value: any) => void --\x3e\n")),(0,i.kt)("h4",{id:"the-directive"},"The directive"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FunctionComponent, createWatcher, createDirective, DirectiveObject } from \"framework\";\n\nexport function highlightDirective(element: HTMLElement, directives: DirectiveObject, context: FunctionComponent) {\n    const { color } = directives;\n\n    if (color) {\n        element.style.backgroundColor = color.get();\n\n        const valueGetter = color.get;\n        createWatcher(valueGetter, element, context, (newValue: any) => {\n            element.style.backgroundColor = newValue;\n        });\n    }\n\n    return element;\n}\n\ncreateDirective(highlightDirective, 'highlight');\n")),(0,i.kt)("h4",{id:"the-component"},"The component"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { registerDirectives, useState } from '@monster-js/core';\nimport { highlightDirective } from './highlight.directive';\n\nexport function Greeting() {\n\n    const [color, setColor] = useState(this, 'red');\n\n    render() {\n        return <h1 highlight:color={color()}>Hello World</h1>\n    }\n}\n\nregisterDirectives(Greeting, [highlightDirective]);\n")))}p.isMDXComponent=!0}}]);