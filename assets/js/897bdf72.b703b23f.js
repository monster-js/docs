"use strict";(self.webpackChunk_monster_js_docs=self.webpackChunk_monster_js_docs||[]).push([[559],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,s(s({ref:t},l),{},{components:n})):a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3768:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3.5},s="Component States",i={unversionedId:"main-concept/component-states",id:"main-concept/component-states",title:"Component States",description:"A state is data that describes the current state of a component. Updating a state will trigger the change detection of the component and update the bindings. In MonsterJS, there are two types of state: component state (managed using the useState hook), and shared state (created by createSharedState function).",source:"@site/docs/main-concept/component-states.md",sourceDirName:"main-concept",slug:"/main-concept/component-states",permalink:"/docs/main-concept/component-states",draft:!1,editUrl:"https://github.com/monster-js/documentation/docs/main-concept/component-states.md",tags:[],version:"current",sidebarPosition:3.5,frontMatter:{sidebar_position:3.5},sidebar:"tutorialSidebar",previous:{title:"Component",permalink:"/docs/main-concept/component"},next:{title:"Event Emitter",permalink:"/docs/main-concept/event-emitter"}},c={},p=[{value:"Component State",id:"component-state",level:2},{value:"Setting a State Value",id:"setting-a-state-value",level:3},{value:"Shared State",id:"shared-state",level:2},{value:"Create a Shared State",id:"create-a-shared-state",level:3},{value:"Setting a Shared State Value",id:"setting-a-shared-state-value",level:3}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"component-states"},"Component States"),(0,r.kt)("p",null,"A state is data that describes the current state of a component. Updating a state will trigger the change detection of the component and update the bindings. In MonsterJS, there are two types of state: component state (managed using the useState hook), and shared state (created by createSharedState function)."),(0,r.kt)("h2",{id:"component-state"},"Component State"),(0,r.kt)("p",null,"The component state is a state that only affects the component where it is defined. It uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," function to create a getter and setter of the state. It has two arguments, first is the ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," context of the component, and second is the initial value of the state."),(0,r.kt)("p",null,"Example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from '@monster-js/core';\n\nexport function App() {\n    const [counter, setCounter] = useState(this, 100);\n    return <h1>{counter()}</h1>\n}\n")),(0,r.kt)("p",null,"In the example above, which uses the useState function, the ",(0,r.kt)("inlineCode",{parentName:"p"},"counter")," variable is the getter of the current value of the state, and ",(0,r.kt)("inlineCode",{parentName:"p"},"setCounter")," is the corresponding function for updating the state."),(0,r.kt)("h3",{id:"setting-a-state-value"},"Setting a State Value"),(0,r.kt)("p",null,"Updating the value of a state variable will trigger change detection of the component and any other components that depend on that state value."),(0,r.kt)("p",null,"Example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from '@monster-js/core';\n\nexport function App() {\n    const [ counter, setCounter ] = useState(this, 100);\n    setInterval(() => setCounter(counter() + 1), 1000);\n    return <h1>{counter()}</h1>\n}\n")),(0,r.kt)("p",null,"The example above demonstrates updating the ",(0,r.kt)("inlineCode",{parentName:"p"},"counter")," state every second using the ",(0,r.kt)("inlineCode",{parentName:"p"},"setCounter")," function and triggers change detection of the component to update the view. This update will only affect the current component, as the counter state is local to the component where it is defined using ",(0,r.kt)("inlineCode",{parentName:"p"},"useState"),"."),(0,r.kt)("h2",{id:"shared-state"},"Shared State"),(0,r.kt)("p",null,"Shared state is a state that can be accessed and updated by multiple components. In MonsterJS, shared state can be created using ",(0,r.kt)("inlineCode",{parentName:"p"},"createShareState")," function. When a value in the shared state is updated, all components that depend on that value will be notified to reflect the updated value."),(0,r.kt)("h3",{id:"create-a-shared-state"},"Create a Shared State"),(0,r.kt)("p",null,"We can create a shared state using the ",(0,r.kt)("inlineCode",{parentName:"p"},"createSharedState")," function. This function accept two arguments, the first is the name of the shared state, the name will be reflected in devTools when inspecting the state, the second argument is the initial value of the state. This function returns an array with two values - the current state value and a function to update the state. We can then use these values inside our components to read or update the shared state."),(0,r.kt)("p",null,"Example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createSharedState } from '@monster-js/core';\n\nexport const counterState = createSharedState('counter', 100);\n")),(0,r.kt)("p",null,"Now, we can import the ",(0,r.kt)("inlineCode",{parentName:"p"},"counterState")," function inside our component. This function accepts two arguments, first is the component's ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," context, and second is an optional parameter which is a callback function that is called when the state is changed. This function returns a getter and setter of the shared state."),(0,r.kt)("p",null,"Example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { counterState } from './counter.state';\n\nexport function App() {\n    const [counter, setCounter] = counterState(this);\n    return <h1>{counter()}</h1>\n}\n")),(0,r.kt)("h3",{id:"setting-a-shared-state-value"},"Setting a Shared State Value"),(0,r.kt)("p",null,"Setting the value of a state will trigger change detection for all components using that state."),(0,r.kt)("p",null,"Example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { counterState } from './counter.state';\n\nexport function App() {\n    const [counter, setCounter] = counterState(this);\n    setInterval(() => setCounter(counter() + 1), 1000);\n    return <h1>{counter()}</h1>\n}\n")),(0,r.kt)("p",null,"The setter has an optional second parameter that accepts a string which describes the action when using the setter."),(0,r.kt)("p",null,"Example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const [counter, setCounter] = counterState(this);\nsetCounter(counter() + 1, 'Increment the counter');\n")),(0,r.kt)("p",null,"This value will be reflected in the devTools."))}d.isMDXComponent=!0}}]);