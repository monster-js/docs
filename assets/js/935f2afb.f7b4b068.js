"use strict";(self.webpackChunk_monster_js_docs=self.webpackChunk_monster_js_docs||[]).push([[197],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What is MonsterJS","href":"/docs/getting-started/what-is-monster-js","docId":"getting-started/what-is-monster-js"},{"type":"link","label":"Quick Start","href":"/docs/getting-started/quick-start","docId":"getting-started/quick-start"}],"href":"/docs/category/getting-started"},{"type":"category","label":"Main Concept","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Component","href":"/docs/main-concept/component","docId":"main-concept/component"},{"type":"link","label":"Component States","href":"/docs/main-concept/component-states","docId":"main-concept/component-states"},{"type":"link","label":"Change Detection","href":"/docs/main-concept/change-detection","docId":"main-concept/change-detection"},{"type":"link","label":"Data Binding","href":"/docs/main-concept/data-binding","docId":"main-concept/data-binding"},{"type":"link","label":"Event Handling","href":"/docs/main-concept/event-handling","docId":"main-concept/event-handling"},{"type":"link","label":"Observed Attributes","href":"/docs/main-concept/observed-attributes","docId":"main-concept/observed-attributes"},{"type":"link","label":"Props","href":"/docs/main-concept/props","docId":"main-concept/props"},{"type":"link","label":"Output Function","href":"/docs/main-concept/output","docId":"main-concept/output"},{"type":"link","label":"List Rendering","href":"/docs/main-concept/list-rendering","docId":"main-concept/list-rendering"},{"type":"link","label":"Conditional Rendering","href":"/docs/main-concept/conditional-rendering","docId":"main-concept/conditional-rendering"},{"type":"link","label":"Lifecycle Hooks","href":"/docs/main-concept/lifecyle-hooks","docId":"main-concept/lifecyle-hooks"},{"type":"link","label":"Directives","href":"/docs/main-concept/directives","docId":"main-concept/directives"},{"type":"link","label":"Custom Directives","href":"/docs/main-concept/custom-directive","docId":"main-concept/custom-directive"},{"type":"link","label":"Services","href":"/docs/main-concept/services","docId":"main-concept/services"},{"type":"link","label":"Dependency Injection","href":"/docs/main-concept/dependency-injection","docId":"main-concept/dependency-injection"}],"href":"/docs/category/main-concept"},{"type":"category","label":"Available Packages","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Store","href":"/docs/available-packages/store","docId":"available-packages/store"},{"type":"link","label":"Router","href":"/docs/available-packages/router","docId":"available-packages/router"}],"href":"/docs/category/available-packages"},{"type":"category","label":"Useful Topics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Environment Variables","href":"/docs/useful-topics/environment-variables","docId":"useful-topics/environment-variables"},{"type":"link","label":"Document Fragment","href":"/docs/useful-topics/document-fragment","docId":"useful-topics/document-fragment"}],"href":"/docs/category/useful-topics"},{"type":"category","label":"CLI","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What is MonsterJS Cli","href":"/docs/cli/cli-what-is-cli","docId":"cli/cli-what-is-cli"},{"type":"link","label":"CLI Installation","href":"/docs/cli/cli-installation","docId":"cli/cli-installation"},{"type":"link","label":"Create MonsterJS Application","href":"/docs/cli/cli-create-application","docId":"cli/cli-create-application"},{"type":"link","label":"Local Development Server","href":"/docs/cli/cli-local-development-server","docId":"cli/cli-local-development-server"},{"type":"link","label":"Build MonsterJS Project","href":"/docs/cli/cli-build-project","docId":"cli/cli-build-project"},{"type":"link","label":"Generate Commands","href":"/docs/cli/cli-generate-commands","docId":"cli/cli-generate-commands"},{"type":"link","label":"CLI Useful Commands","href":"/docs/cli/cli-useful-commands","docId":"cli/cli-useful-commands"}],"href":"/docs/category/cli"},{"type":"link","label":"License","href":"/docs/license","docId":"license"}]},"docs":{"available-packages/router":{"id":"available-packages/router","title":"Router","description":"The MonsterJS Router enables developers to build a single-page application with multiple components that act as different pages of the app. The view changes depending on the activated route, which is determined by the URL of the browser and the path registered in the route component.","sidebar":"tutorialSidebar"},"available-packages/store":{"id":"available-packages/store","title":"Store","description":"The Store is a state management system designed specifically for the MonsterJS framework. By using the Store, developers can easily centralize the state of their application and ensure that it is consistent throughout the codebase. This makes it easier to maintain and debug the code, as well as to add new features and functionality in a scalable way.","sidebar":"tutorialSidebar"},"cli/cli-build-project":{"id":"cli/cli-build-project","title":"Build MonsterJS Project","description":"To build a MonsterJS application, you can run the following command:","sidebar":"tutorialSidebar"},"cli/cli-create-application":{"id":"cli/cli-create-application","title":"Create MonsterJS Application","description":"To create a new application using the CLI, we just need to run the command mn new .","sidebar":"tutorialSidebar"},"cli/cli-generate-commands":{"id":"cli/cli-generate-commands","title":"Generate Commands","description":"The MonsterJS CLI is a powerful tool that simplifies the process of creating components, services, and other necessary files for a MonsterJS application.","sidebar":"tutorialSidebar"},"cli/cli-installation":{"id":"cli/cli-installation","title":"CLI Installation","description":"MonsterJS cli helps developers to create a working application out of the box. It has many useful commands like generating files for our MonsterJS app.","sidebar":"tutorialSidebar"},"cli/cli-local-development-server":{"id":"cli/cli-local-development-server","title":"Local Development Server","description":"To start a local development server, you can run the following command:","sidebar":"tutorialSidebar"},"cli/cli-useful-commands":{"id":"cli/cli-useful-commands","title":"CLI Useful Commands","description":"Here are some useful commands that CLI provides.","sidebar":"tutorialSidebar"},"cli/cli-what-is-cli":{"id":"cli/cli-what-is-cli","title":"What is MonsterJS Cli","description":"The MonsterJS CLI is an efficient and user-friendly command-line interface tool that is designed to simplify the process of creating new projects and generating MonsterJS files such as components, services, and more. Although it is not mandatory to use the CLI when building MonsterJS applications, utilizing this tool can offer great advantages to developers.","sidebar":"tutorialSidebar"},"getting-started/quick-start":{"id":"getting-started/quick-start","title":"Quick Start","description":"There are multiple ways to set up a MonsterJS project, but the easiest method is to clone the starter app from GitHub. Another option is to use the CLI.","sidebar":"tutorialSidebar"},"getting-started/what-is-monster-js":{"id":"getting-started/what-is-monster-js","title":"What is MonsterJS","description":"MonsterJS is a JavaScript framework for building web applications or standalone components based on web components, which are suitable for encapsulating components and creating micro front-end apps.","sidebar":"tutorialSidebar"},"license":{"id":"license","title":"License","description":"MIT","sidebar":"tutorialSidebar"},"main-concept/change-detection":{"id":"main-concept/change-detection","title":"Change Detection","description":"Change detection is the process of synchronizing the data between a component\'s logic and view. It is triggered when a value of a state is updated or the detectChanges function is manually called.","sidebar":"tutorialSidebar"},"main-concept/component":{"id":"main-concept/component","title":"Component","description":"Components are the most basic building block of an application. They are composed of templates, logic, and styles, and are used to split the UI into small, reusable pieces of code.","sidebar":"tutorialSidebar"},"main-concept/component-states":{"id":"main-concept/component-states","title":"Component States","description":"A state is data that describes the current state of a component. Updating a state will trigger the change detection of the component and update the bindings. In MonsterJS, there are two types of state: component state (managed using the useState hook), and shared state (created by createSharedState function).","sidebar":"tutorialSidebar"},"main-concept/conditional-rendering":{"id":"main-concept/conditional-rendering","title":"Conditional Rendering","description":"Conditional rendering is used to conditionally render an element in the DOM. It uses the v:if directive to remove an element from the DOM if the value is falsy, and append the element if the value is truthy.","sidebar":"tutorialSidebar"},"main-concept/custom-directive":{"id":"main-concept/custom-directive","title":"Custom Directives","description":"Custom directives are functions that manipulate elements in a MonsterJS application. They can be used to add behavior or modify the appearance of an element.","sidebar":"tutorialSidebar"},"main-concept/data-binding":{"id":"main-concept/data-binding","title":"Data Binding","description":"Data binding is a technique that synchronizes the data between a component\'s logic and its view. This means that when data changes in the logic, the view is updated, and when the user changes some values in the view, the data in the logic is updated accordingly.","sidebar":"tutorialSidebar"},"main-concept/dependency-injection":{"id":"main-concept/dependency-injection","title":"Dependency Injection","description":"Dependency Injection is a design pattern that enables a class to be injected with its dependencies instead of creating them inside the class. This pattern is used to promote loose coupling between classes, which can lead to more maintainable and testable code.","sidebar":"tutorialSidebar"},"main-concept/directives":{"id":"main-concept/directives","title":"Directives","description":"In MonsterJS, directives allow you to modify the appearance or add additional behavior to an element. Directives are used to attach special behavior to elements in the DOM, such as manipulating their attributes or registering event listeners. They can be used to make elements dynamic, reactive, or conditional based on certain conditions or state changes.","sidebar":"tutorialSidebar"},"main-concept/event-handling":{"id":"main-concept/event-handling","title":"Event Handling","description":"Event handling is a directive that allows a component to respond to user actions on the UI, such as button clicks, text inputs, dragging elements, and other actions. It uses a directive with the namespace of on or on-prevent to bind a function to an element as an event listener.","sidebar":"tutorialSidebar"},"main-concept/lifecyle-hooks":{"id":"main-concept/lifecyle-hooks","title":"Lifecycle Hooks","description":"Lifecycle hooks are functions that let you run a block of code when your component or directive triggers a lifecycle event.","sidebar":"tutorialSidebar"},"main-concept/list-rendering":{"id":"main-concept/list-rendering","title":"List Rendering","description":"The list rendering directive allows developers to render a list of elements based on a given array of data.","sidebar":"tutorialSidebar"},"main-concept/observed-attributes":{"id":"main-concept/observed-attributes","title":"Observed Attributes","description":"Observed attributes are values passed down from a parent component to a child component as an element attribute, and their changes are observed by the child component. This feature uses the observed attributes implementation of web components. Similar to web components, it does not accept objects and arrays, and only accepts string values. However, the MonsterJS implementation is more advanced, as it can convert the value into a number or boolean.","sidebar":"tutorialSidebar"},"main-concept/output":{"id":"main-concept/output","title":"Output Function","description":"The output function allows us to expose a function from the component, which can then be triggered from the parent component using callOutputFn.","sidebar":"tutorialSidebar"},"main-concept/props":{"id":"main-concept/props","title":"Props","description":"Component props enables developers to pass any type of data from a parent component to child components. It is more advanced than observed attributes, since observed attributes can only accept string, number, or boolean values.","sidebar":"tutorialSidebar"},"main-concept/services":{"id":"main-concept/services","title":"Services","description":"Services are injectable classes that allow us to perform reusable logic. This approach can help keep our components clean and easy to maintain. It is recommended that all HTTP requests and business logic be performed inside a service.","sidebar":"tutorialSidebar"},"useful-topics/document-fragment":{"id":"useful-topics/document-fragment","title":"Document Fragment","description":"A document fragment is a JSX element that allows you to group a list of elements together without creating a new DOM element. This is useful for improving performance and reducing the number of unnecessary DOM operations, especially when rendering long lists or dynamic content.","sidebar":"tutorialSidebar"},"useful-topics/environment-variables":{"id":"useful-topics/environment-variables","title":"Environment Variables","description":"Environment variables help us define static variables for our application. They allow us to configure our project for different deployments without changing the code inside our application. We can define environment variables for production, development, and even custom environment variables.","sidebar":"tutorialSidebar"}}}')}}]);