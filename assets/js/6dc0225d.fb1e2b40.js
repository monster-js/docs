"use strict";(self.webpackChunk_monster_js_docs=self.webpackChunk_monster_js_docs||[]).push([[483],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,c=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=l(n),v=i,d=m["".concat(s,".").concat(v)]||m[v]||u[v]||c;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var c=n.length,o=new Array(c);o[0]=v;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[m]="string"==typeof e?e:i,o[1]=a;for(var l=2;l<c;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},730:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const c={sidebar_position:14},o="Services",a={unversionedId:"main-concept/services",id:"main-concept/services",title:"Services",description:"Services are injectable classes that allow us to perform reusable logic. This approach can help keep our components clean and easy to maintain. It is recommended that all HTTP requests and business logic be performed inside a service.",source:"@site/docs/main-concept/services.md",sourceDirName:"main-concept",slug:"/main-concept/services",permalink:"/docs/main-concept/services",draft:!1,editUrl:"https://github.com/monster-js/documentation/docs/main-concept/services.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Custom Directives",permalink:"/docs/main-concept/custom-directive"},next:{title:"Dependency Injection",permalink:"/docs/main-concept/dependency-injection"}},s={},l=[{value:"Create a Service",id:"create-a-service",level:2},{value:"Singleton Service",id:"singleton-service",level:2},{value:"Register a Service",id:"register-a-service",level:2},{value:"Inject a Service",id:"inject-a-service",level:2},{value:"Inject a Service into a Directive",id:"inject-a-service-into-a-directive",level:2},{value:"Injecting a Service into Another Service",id:"injecting-a-service-into-another-service",level:2}],p={toc:l},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"services"},"Services"),(0,i.kt)("p",null,"Services are injectable classes that allow us to perform reusable logic. This approach can help keep our components clean and easy to maintain. It is recommended that all HTTP requests and business logic be performed inside a service."),(0,i.kt)("h2",{id:"create-a-service"},"Create a Service"),(0,i.kt)("p",null,"To create a service, we can use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/cli/cli-what-is-cli"},"CLI")," to automatically generate a service file with boilerplate code, or we can manually create a file and write the code from scratch."),(0,i.kt)("p",null,"The following code is an example of working service code, but it does not yet include any functions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Service } from '@monster-js/core';\n\n@Service()\nexport class GreetingService {\n}\n")),(0,i.kt)("h2",{id:"singleton-service"},"Singleton Service"),(0,i.kt)("p",null,"Services are transient by default. To create a singleton service, we need to pass an optional configuration object to the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Service()")," decorator. This object should contain a 'singleton' property that is set to true."),(0,i.kt)("p",null,"Example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Service } from '@monster-js/core';\n\n@Service({ singleton: true })\nexport class GreetingService {\n}\n")),(0,i.kt)("h2",{id:"register-a-service"},"Register a Service"),(0,i.kt)("p",null,"We need to register a service in a dependency injection container before we can use it."),(0,i.kt)("p",null,"Example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'// home.di.ts\nimport { createDIContainer } from "framework";\nimport { GreetingService } from "./greeting.service";\n\nexport const homeDI = createDIContainer(\'home\', [ GreetingService ]);\n')),(0,i.kt)("h2",{id:"inject-a-service"},"Inject a Service"),(0,i.kt)("p",null,"To use a service in our component, we can import the dependency injection container we created and use its ",(0,i.kt)("inlineCode",{parentName:"p"},"inject")," method to get an instance of the service."),(0,i.kt)("p",null,"Example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { homeDI } from './home.di';\nimport { GreetingService } from \"./greeting.service\";\n\nexport function App() {\n    const greetingService = homeDI.inject(GreetingService);\n    return <h1>App Component</h1>\n}\n")),(0,i.kt)("p",null,"Now we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"greetingService")," in our component."),(0,i.kt)("h2",{id:"inject-a-service-into-a-directive"},"Inject a Service into a Directive"),(0,i.kt)("p",null,"To inject a service into a directive we can use the same process that we used to inject a service in a component."),(0,i.kt)("p",null,"Example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { homeDI } from './home.di';\nimport { GreetingService } from \"./greeting.service\";\n\nexport function highlightDirective(element: HTMLElement) {\n\n    const greetingService = homeDI.inject(GreetingService);\n\n    return element;\n}\n")),(0,i.kt)("h2",{id:"injecting-a-service-into-another-service"},"Injecting a Service into Another Service"),(0,i.kt)("p",null,"To inject a service into another service, we can use the constructor of the service line the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Service } from '@monster-js/core';\n\n@Service()\nexport class MessageService {\n    public getMessage() {\n        return \"Hello World\";\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Service } from '@monster-js/core';\n\n@Service()\nexport class GreetingService {\n\n    constructor(private messageService: MessageService) {}\n\n    public greet() {\n        console.log(this.messageService.getMessage());\n    }\n}\n")),(0,i.kt)("p",null,"Both the ",(0,i.kt)("inlineCode",{parentName:"p"},"MessageService")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GreetingService")," must be registered in the same dependency injection container for them to work properly."))}u.isMDXComponent=!0}}]);