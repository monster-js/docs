"use strict";(self.webpackChunk_monster_js_docs=self.webpackChunk_monster_js_docs||[]).push([[328],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),s=p(n),d=r,h=s["".concat(l,".").concat(d)]||s[d]||m[d]||i;return n?o.createElement(h,c(c({ref:t},u),{},{components:n})):o.createElement(h,c({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[s]="string"==typeof e?e:r,c[1]=a;for(var p=2;p<i;p++)c[p]=n[p];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1967:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:8.1},c="Output Function",a={unversionedId:"main-concept/output",id:"main-concept/output",title:"Output Function",description:"The output function allows us to expose a function from the component, which can then be triggered from the parent component using callOutputFn.",source:"@site/docs/main-concept/output.md",sourceDirName:"main-concept",slug:"/main-concept/output",permalink:"/docs/docs/main-concept/output",draft:!1,editUrl:"https://github.com/monster-js/documentation/docs/main-concept/output.md",tags:[],version:"current",sidebarPosition:8.1,frontMatter:{sidebar_position:8.1},sidebar:"tutorialSidebar",previous:{title:"Props",permalink:"/docs/docs/main-concept/props"},next:{title:"List Rendering",permalink:"/docs/docs/main-concept/list-rendering"}},l={},p=[{value:"Syntax",id:"syntax",level:2},{value:"Child component",id:"child-component",level:4},{value:"Parent component",id:"parent-component",level:4},{value:"Typing",id:"typing",level:2},{value:"Child component",id:"child-component-1",level:4},{value:"Parent component",id:"parent-component-1",level:4}],u={toc:p},s="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"output-function"},"Output Function"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"output")," function allows us to expose a function from the component, which can then be triggered from the parent component using ",(0,r.kt)("inlineCode",{parentName:"p"},"callOutputFn"),"."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"output")," function has three arguments: the first is the ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," context of the component, the second is the output function name, and the third is the callback. The output function key is the property key that will be used to trigger the output function from outside the component. The callback function will run once the output function is triggered."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"callOutputFn")," function takes three arguments: the first is the child component that contains the outputted function; the second is the name of the output function; and the third is an optional argument that accepts an array, which will serve as the parameters of the outputted callback from the child component."),(0,r.kt)("p",null,"Example."),(0,r.kt)("h4",{id:"child-component"},"Child component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { output } from '@monster-js/core';\n\nexport function Child() {\n    output(this, 'greet', (name: string) => {\n        return 'Hello ' + name;\n    });\n    return <h1>Child component</h1>\n}\n")),(0,r.kt)("h4",{id:"parent-component"},"Parent component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { callOutputFn } from '@monster-js/core';\n\nexport function Parent() {\n\n    let childRef: any;\n\n    const clickMe = () => {\n        const message = callOutputFn(childRef, 'greet', ['John']);\n        console.log(message);\n    }\n\n    return <div>\n        <button on:click={clickMe}>Click Me</button>\n        <Child v:ref={childRef}></Child>\n    </div>\n}\n")),(0,r.kt)("h2",{id:"typing"},"Typing"),(0,r.kt)("p",null,"We can also provide generic types for our output function. This will help developers easily identify which properties they can use, and it will also assist with type checking."),(0,r.kt)("p",null,"Example."),(0,r.kt)("h4",{id:"child-component-1"},"Child component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { output } from '@monster-js/core';\n\nexport interface ChildInterface {\n    greet: (...args: any[]) => string;\n}\n\nexport function Child() {\n    output<ChildInterface>(this, 'greet', (name: string) => {\n        return 'Hello ' + name;\n    });\n    return <h1>Child component</h1>\n}\n")),(0,r.kt)("h4",{id:"parent-component-1"},"Parent component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { callOutputFn } from '@monster-js/core';\nimport { Child, ChildInterface } from './child.component';\n\nexport function Parent() {\n\n    let childRef: any;\n\n    const clickMe = () => {\n        const message = callOutputFn<ChildInterface>(childRef, 'greet', ['John']);\n        console.log(message);\n    }\n\n    return <div>\n        <button on:click={clickMe}>Click Me</button>\n        <Child v:ref={childRef}></Child>\n    </div>\n}\n")),(0,r.kt)("p",null,"This will ensure that the output function exists in ",(0,r.kt)("inlineCode",{parentName:"p"},"ChildInterface"),"."))}m.isMDXComponent=!0}}]);